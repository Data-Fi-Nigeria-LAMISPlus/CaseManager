[{"C:\\Users\\victor.ajor\\projects\\casemanager\\src\\index.js":"1","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\App.js":"2","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\reportWebVitals.js":"3","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\context\\ThemeContext.js":"4","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\Home.js":"5","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\context\\ThemeDemo.js":"6","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\api.js":"7","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\case_manager\\CaseManagerList.js":"8","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\case_manager\\AddCaseManager.js":"9","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\case_manager\\AssignCaseManager.js":"10","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\patient\\PatientList.js":"11","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\case_manager\\EditCaseManager.js":"12","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\patient\\PatientTabs.js":"13","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\patient\\AssignedClients.js":"14","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\patient\\ViewAssignedClients.js":"15","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\layouts\\SplitActionButton.js":"16","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\layouts\\PageTitle.js":"17","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\layouts\\PageTitle.js":"18","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\patient\\ReassignClientModal.js":"19"},{"size":672,"mtime":1672751849507,"results":"20","hashOfConfig":"21"},{"size":961,"mtime":1679735564887,"results":"22","hashOfConfig":"21"},{"size":375,"mtime":1663251978370,"results":"23","hashOfConfig":"21"},{"size":9235,"mtime":1663251975986,"results":"24","hashOfConfig":"21"},{"size":2524,"mtime":1680115887746,"results":"25","hashOfConfig":"21"},{"size":3056,"mtime":1663251975987,"results":"26","hashOfConfig":"21"},{"size":481,"mtime":1680503631671,"results":"27","hashOfConfig":"21"},{"size":10374,"mtime":1680171132611,"results":"28","hashOfConfig":"21"},{"size":10198,"mtime":1679924357408,"results":"29","hashOfConfig":"21"},{"size":13215,"mtime":1679923065084,"results":"30","hashOfConfig":"21"},{"size":7804,"mtime":1680336185601,"results":"31","hashOfConfig":"21"},{"size":9110,"mtime":1680171519399,"results":"32","hashOfConfig":"21"},{"size":1535,"mtime":1679571038163,"results":"33","hashOfConfig":"21"},{"size":6149,"mtime":1680473184050,"results":"34","hashOfConfig":"21"},{"size":15019,"mtime":1680472416019,"results":"35","hashOfConfig":"21"},{"size":5082,"mtime":1679399002928,"results":"36","hashOfConfig":"21"},{"size":579,"mtime":1679832107134,"results":"37","hashOfConfig":"21"},{"size":543,"mtime":1663251978368,"results":"38","hashOfConfig":"21"},{"size":11887,"mtime":1680469148966,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"1uxnb99",{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"43"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"43"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"43"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"43"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"43"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"43"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},"C:\\Users\\victor.ajor\\projects\\casemanager\\src\\index.js",["91"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter, MemoryRouter as Router } from \"react-router-dom\";\r\n\r\nimport reportWebVitals from \"./../src/main/webapp/reportWebVitals\";\r\nimport SimpleReactLightbox from \"simple-react-lightbox\";\r\nimport ThemeContext from \"./../src/main/webapp/context/ThemeContext\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <SimpleReactLightbox>\r\n      <BrowserRouter basename=\"/\">\r\n        <ThemeContext>\r\n          <App />\r\n        </ThemeContext>\r\n      </BrowserRouter>\r\n    </SimpleReactLightbox>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nreportWebVitals();\r\n",["92","93"],"C:\\Users\\victor.ajor\\projects\\casemanager\\src\\App.js",[],"C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\reportWebVitals.js",[],"C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\context\\ThemeContext.js",[],"C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\Home.js",["94"],"import React, { useState, Fragment, useEffect } from \"react\";\r\nimport { Row, Col, Card, Tab, Tabs } from \"react-bootstrap\";\r\nimport CaseManagerList from \"./case_manager/CaseManagerList\";\r\nimport PatientList from \"./patient/PatientList\";\r\nimport AssignedClients from \"./patient/AssignedClients\";\r\nimport axios from \"axios\";\r\nimport { token, url } from \"../../api\";\r\nimport PageTitle from \"./layouts/PageTitle\";\r\n\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst Home = (props) => {\r\n  const [key, setKey] = useState(\"case-manager\");\r\n\r\n  const urlTabs =\r\n    props.location && props.location.state ? props.location.state : null;\r\n  const [permissions, setPermissions] = useState([]);\r\n\r\n  const userPermission = () => {\r\n    axios\r\n      .get(`${url}account`, { headers: { Authorization: `Bearer ${token}` } })\r\n      .then((response) => {\r\n        setPermissions(response.data.permissions);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n\r\n  useEffect(() => {\r\n    userPermission();\r\n\r\n    switch (urlTabs) {\r\n      case \"existing-manifest\":\r\n        return setKey(\"case-manager\");\r\n      case \"assigned-casemanager\":\r\n        return setKey(\"assigned-casemanager\");\r\n      case \"assign-casemanager\":\r\n        return setKey(\"assign-casemanager\");\r\n      default:\r\n        return setKey(\"assign-casemanager\");\r\n    }\r\n  }, [urlTabs]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Row>\r\n        <Col xl={12}>\r\n          <Card style={divStyle}>\r\n            <Card.Body>\r\n              {/* <!-- Nav tabs --> */}\r\n\r\n              <div className=\"custom-tab-1\">\r\n                <PageTitle activeMenu=\"Home \" motherMenu=\"Case Manager\" />\r\n                <Tabs\r\n                  id=\"controlled-tab-example\"\r\n                  activeKey={key}\r\n                  onSelect={(k) => setKey(k)}\r\n                  className=\"mb-3\"\r\n                >\r\n                  <Tab eventKey=\"assign-casemanager\" title=\"Enrolled Patients\">\r\n                    <PatientList />\r\n                  </Tab>\r\n                  <Tab\r\n                    eventKey=\"assigned-casemanager\"\r\n                    title=\"Assigned Managers\"\r\n                  >\r\n                    <AssignedClients />\r\n                  </Tab>\r\n                  <Tab eventKey=\"case-manager\" title=\"Case Managers\">\r\n                    <CaseManagerList />\r\n                  </Tab>\r\n                </Tabs>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\context\\ThemeDemo.js",[],"C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\api.js",[],"C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\case_manager\\CaseManagerList.js",["95","96","97","98","99","100","101"],"import React, { useEffect, useCallback, useState } from \"react\";\r\nimport { useLocation, useHistory } from \"react-router-dom\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport PersonAddIcon from \"@mui/icons-material/PersonAdd\";\r\n\r\nimport AddCaseManager from \"./AddCaseManager\";\r\nimport EditCaseManager from \"./EditCaseManager\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nimport { MdDeleteForever, MdModeEdit } from \"react-icons/md\";\r\n\r\nimport SplitActionButton from \"../layouts/SplitActionButton\";\r\n\r\nimport { Badge, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\n\r\nimport \"../layouts/sample.css\";\r\n\r\nimport { forwardRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { token, url } from \"../../../api\";\r\n\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { FaEye } from \"react-icons/fa\";\r\n\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst CaseManagerList = (props) => {\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = useState(\"\");\r\n  const [permissions, setPermissions] = useState([]);\r\n  const history = useHistory();\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [addModal, setAddModal] = useState(false);\r\n  const [editModal, setEditModal] = useState(false);\r\n  const [modal, setModal] = useState(false);\r\n  const [caseManager, setCaseManager] = useState({});\r\n  const [caseManagers, setCaseManagers] = useState([]);\r\n\r\n  const toggle = () => setAddModal(!addModal);\r\n\r\n  const toggleEdit = () => setEditModal(!editModal);\r\n\r\n  const toggleDelete = (id) => {\r\n    localStorage.setItem(\"patientID\", JSON.stringify(id));\r\n    setModal(!modal);\r\n  };\r\n\r\n  const userPermission = () => {\r\n    axios\r\n      .get(`${url}account`, { headers: { Authorization: `Bearer ${token}` } })\r\n      .then((response) => {\r\n        //console.log(\"permission\", response.data.permissions)\r\n        setPermissions(response.data.permissions);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n\r\n  const addCaseManager = () => {\r\n    setAddModal(!addModal);\r\n  };\r\n\r\n  const editCaseManager = (data) => {\r\n    setCaseManager(data);\r\n    setEditModal(!editModal);\r\n  };\r\n\r\n  const onCancelDelete = () => {\r\n    setModal(false);\r\n  };\r\n\r\n  const getAllCaseManagers = () => {\r\n    try {\r\n      axios\r\n        .get(`${url}casemanager/list`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((resp) => setCaseManagers(resp.data));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllCaseManagers();\r\n    //setLoading(\"true\");\r\n    //userPermission();\r\n  }, []);\r\n\r\n  const handleDelete = () => {\r\n    const patientId = localStorage.getItem(\"patientID\");\r\n    axios\r\n      .delete(`${url}casemanager/delete/${patientId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        localStorage.removeItem(\"patientID\");\r\n        Swal.fire({\r\n          icon: \"success\",\r\n          text: \"Case Manager Deleted Successfully\",\r\n          timer: 1500,\r\n        });\r\n\r\n        setModal(false);\r\n        getAllCaseManagers();\r\n        history.push(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          title: \"Oops...\",\r\n          text: \"An error occurred while deleting!!!\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const actionItems = (row) => {\r\n    return [\r\n      {\r\n        name: \"View\",\r\n        type: \"link\",\r\n        icon: <FaEye size=\"22\" />,\r\n        to: {\r\n          pathname: \"/print-manifest\",\r\n          state: { sampleObj: row, permissions: permissions },\r\n        },\r\n      },\r\n      {\r\n        name: \" Edit\",\r\n        type: \"link\",\r\n        icon: <MdModeEdit size=\"20\" color=\"rgb(4, 196, 217)\" />,\r\n        editAction: () => {\r\n          editCaseManager(row);\r\n        },\r\n        to: {\r\n          pathname: \"/#\",\r\n          state: { patientObj: row },\r\n        },\r\n      },\r\n      {\r\n        name: \" Delete\",\r\n        type: \"link\",\r\n        icon: <MdDeleteForever size=\"20\" color=\"rgb(4, 196, 217)\" />,\r\n        deleteAction: () => {\r\n          toggleDelete(row.id);\r\n        },\r\n        to: {\r\n          pathname: \"/#\",\r\n          state: { patientObj: row },\r\n        },\r\n      },\r\n    ];\r\n  };\r\n\r\n  const handleChangePage = (page) => {\r\n    setCurrentPage(page + 1);\r\n  };\r\n\r\n  const localization = {\r\n    pagination: {\r\n      labelDisplayedRows: `Page: ${currentPage}`,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className=\"float-right mr-1\"\r\n        startIcon={<PersonAddIcon />}\r\n        onClick={addCaseManager}\r\n        style={{\r\n          float: \"right\",\r\n          backgroundColor: \"#014d88\",\r\n          fontWeight: \"bolder\",\r\n          color: \"fff\",\r\n        }}\r\n      >\r\n        <span style={{ textTransform: \"capitalize\" }}>Add Case Manager </span>\r\n      </Button>\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"Case Managers\"\r\n        columns={[\r\n          { title: \"Designation\", field: \"designation\" },\r\n          { title: \"First Name\", field: \"firstName\" },\r\n          { title: \"Last Name\", field: \"lastName\" },\r\n          { title: \"Gender\", field: \"gender\" },\r\n          { title: \"Phone Number\", field: \"phoneNumber\" },\r\n          { title: \"Action\", field: \"actions\" },\r\n        ]}\r\n        isLoading={loading}\r\n        data={\r\n          caseManagers &&\r\n          caseManagers.map((row) => ({\r\n            designation: row.designation,\r\n            firstName: row.firstName,\r\n            lastName: row.lastName,\r\n            gender: row.sex,\r\n            phoneNumber: `+${row.phoneNumber}`,\r\n            actions: (\r\n              <>\r\n                <SplitActionButton actions={actionItems(row)} />\r\n              </>\r\n            ),\r\n          }))\r\n        }\r\n        options={{\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n            fontSize: \"16px\",\r\n            padding: \"10px\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          selection: false,\r\n          filtering: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n        onChangePage={handleChangePage}\r\n        localization={localization}\r\n      />\r\n      <AddCaseManager\r\n        modalstatus={addModal}\r\n        togglestatus={toggle}\r\n        getAllCaseManagers={getAllCaseManagers}\r\n      />\r\n      <EditCaseManager\r\n        modalstatus={editModal}\r\n        togglestatus={toggleEdit}\r\n        casemanager={caseManager}\r\n        getAllCaseManagers={getAllCaseManagers}\r\n      />\r\n\r\n      <Modal isOpen={modal} toggle={onCancelDelete}>\r\n        <ModalHeader toggle={onCancelDelete}>Delete Case Manager</ModalHeader>\r\n        <ModalBody>Are you sure you want to delete this record?</ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" type=\"button\" onClick={handleDelete}>\r\n            Yes\r\n          </Button>{\" \"}\r\n          <Button\r\n            color=\"secondary\"\r\n            type=\"button\"\r\n            onClick={(e) => onCancelDelete()}\r\n          >\r\n            No\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CaseManagerList;\r\n","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\case_manager\\AddCaseManager.js",["102","103","104","105"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormFeedback,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { Alert } from \"reactstrap\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../api\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n}));\r\n\r\nconst AddCaseManager = (props) => {\r\n  const classes = useStyles();\r\n  const [data, setData] = useState({\r\n    designation: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    sex: \"\",\r\n    phoneNumber: \"\",\r\n  });\r\n\r\n  const [contactPhone, setContactPhone] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setData({\r\n      ...data,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const checkPhoneNumber = (e) => {\r\n    setContactPhone(e);\r\n  };\r\n\r\n  const validateInputs = () => {\r\n    let temp = { ...errors };\r\n    temp.designation = data.designation ? \"\" : \"Designation is required.\";\r\n    temp.firstName = data.firstName ? \"\" : \"First name is required.\";\r\n    temp.lastName = data.lastName ? \"\" : \"Last name is required.\";\r\n    temp.sex = data.sex ? \"\" : \"Sex is required.\";\r\n    temp.phoneNumber = data.phoneNumber ? \"\" : \"Phone number is required.\";\r\n\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n    return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n\r\n  const addCaseManager = async (e) => {\r\n    e.preventDefault();\r\n\r\n    data.phoneNumber = contactPhone;\r\n\r\n    if (validateInputs()) {\r\n      await axios\r\n        .post(`${baseUrl}casemanager/create`, data, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((resp) => {\r\n          console.log(resp);\r\n          toast.success(\"Case manager added successfully\");\r\n        })\r\n        .catch((err) => {\r\n          //console.log(err);\r\n          toast.error(\r\n            \"Something went wrong. Please try again... \" + err.message\r\n          );\r\n        });\r\n      props.getAllCaseManagers();\r\n      props.togglestatus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        isOpen={props.modalstatus}\r\n        toggle={props.togglestatus}\r\n        className={props.className}\r\n        size=\"lg\"\r\n      >\r\n        <Form>\r\n          <ModalHeader toggle={props.togglestatus}>\r\n            Add Case Manager\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <Card>\r\n              <CardBody>\r\n                <Row>\r\n                  <Col md={6}>\r\n                    <FormGroup>\r\n                      <Label for=\"courierRiderName\" className={classes.label}>\r\n                        Designation <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"designation\"\r\n                        id=\"designation\"\r\n                        value={data.designation}\r\n                        onChange={handleInputChange}\r\n                        className=\"form-control\"\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />\r\n                      {errors.designation !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.designation}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <FormGroup>\r\n                      <Label for=\"courierRiderName\" className={classes.label}>\r\n                        First Name <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"firstName\"\r\n                        id=\"firstName\"\r\n                        value={data.firstName}\r\n                        onChange={handleInputChange}\r\n                        className=\"form-control\"\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />\r\n                      {errors.firstName !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.firstName}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col md={6}>\r\n                    <FormGroup>\r\n                      <Label for=\"courierRiderName\" className={classes.label}>\r\n                        Last Name <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"lastName\"\r\n                        id=\"lastName\"\r\n                        value={data.lastName}\r\n                        onChange={handleInputChange}\r\n                        className=\"form-control\"\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />\r\n                      {errors.lastName !== \"\" ? (\r\n                        <span className={classes.error}>{errors.lastName}</span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <FormGroup>\r\n                      <Label for=\"sex\" className={classes.label}>\r\n                        Gender <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        style={{\r\n                          border: \"1px solid #014d88\",\r\n                          borderRadius: \"0px\",\r\n                          fontSize: \"14px\",\r\n                          color: \"#000\",\r\n                        }}\r\n                        name=\"sex\"\r\n                        value={data.sex}\r\n                        id=\"sex\"\r\n                        onChange={handleInputChange}\r\n                      >\r\n                        <option>Select Gender</option>\r\n                        <option>Male</option>\r\n                        <option>Female</option>\r\n                      </select>\r\n                      {errors.sex !== \"\" ? (\r\n                        <span className={classes.error}>{errors.sex}</span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col md={6}>\r\n                    <FormGroup>\r\n                      <Label for=\"phoneNumber\" className={classes.label}>\r\n                        Phone Number <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <PhoneInput\r\n                        containerStyle={{\r\n                          width: \"100%\",\r\n                          border: \"1px solid #014d88\",\r\n                        }}\r\n                        inputStyle={{\r\n                          width: \"100%\",\r\n                          borderRadius: \"0px\",\r\n                          height: 44,\r\n                        }}\r\n                        country={\"ng\"}\r\n                        masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\r\n                        placeholder=\"(234)7099999999\"\r\n                        value={data.phoneNumber}\r\n                        onChange={(e) => checkPhoneNumber(e)}\r\n                      />\r\n                      {errors.phoneNumber !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.phoneNumber}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n                <br />\r\n                <br />\r\n\r\n                <MatButton\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  startIcon={<SaveIcon />}\r\n                  onClick={addCaseManager}\r\n                >\r\n                  Submit\r\n                </MatButton>\r\n\r\n                <MatButton\r\n                  variant=\"contained\"\r\n                  color=\"default\"\r\n                  onClick={props.togglestatus}\r\n                  className={classes.button}\r\n                  startIcon={<CancelIcon />}\r\n                >\r\n                  Cancel\r\n                </MatButton>\r\n              </CardBody>\r\n            </Card>\r\n          </ModalBody>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddCaseManager;\r\n","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\case_manager\\AssignCaseManager.js",["106","107","108"],"import React, { useEffect, useCallback, useState } from \"react\";\r\nimport { useLocation, useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@mui/material/Container\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport Button from \"@mui/material/Button\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { token, url } from \"../../../api\";\r\nimport PageTitle from \"../layouts/PageTitle\";\r\nimport Alert from \"@mui/material/Alert\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport ReplyIcon from \"@mui/icons-material/Reply\";\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Table,\r\n} from \"reactstrap\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    border: \"1px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"14px\",\r\n    color: \"#000\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n  inputGroupText: {\r\n    backgroundColor: \"#014d88\",\r\n    fontWeight: \"bolder\",\r\n    color: \"#fff\",\r\n    borderRadius: \"0px\",\r\n  },\r\n  label: {\r\n    fontSize: \"14px\",\r\n    color: \"#014d88\",\r\n    fontWeight: \"600\",\r\n  },\r\n}));\r\n\r\nconst AssignCaseManager = (props) => {\r\n  const location = useLocation();\r\n  // const { patients } = location.state;\r\n  const history = useHistory();\r\n  const result = JSON.parse(localStorage.getItem(\"patients\"));\r\n  // console.log(result);\r\n  const classes = useStyles();\r\n  const [states, setStates] = useState([]);\r\n  const [provinces, setProvinces] = useState([]);\r\n  const [caseManager, setCaseManager] = useState([]);\r\n  const [patientAssigned, setPatientAssigned] = useState([]);\r\n  const [errors, setErrors] = useState({});\r\n  const [assignedData, setAssignedData] = useState({\r\n    assignDate: \"\",\r\n    caseManager: \"\",\r\n    state: \"\",\r\n    lga: \"\",\r\n    patients: result,\r\n  });\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setAssignedData({\r\n      ...assignedData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  function getStateByCountryId(getCountryId) {\r\n    axios\r\n      .get(\r\n        `${url}organisation-units/parent-organisation-units/${getCountryId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setStates(response.data);\r\n      })\r\n      .catch((error) => {});\r\n  }\r\n\r\n  const getProvinces = (e) => {\r\n    let stateValue = e.target.value.split(\" \");\r\n    let stateId = stateValue[0];\r\n    let stateName = stateValue[1];\r\n\r\n    if (stateName.length > 0) {\r\n      setAssignedData({ ...assignedData, state: e.target.value });\r\n    }\r\n\r\n    axios\r\n      .get(`${url}organisation-units/parent-organisation-units/${stateId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setProvinces(\r\n          response.data.sort((x, y) => {\r\n            return x.id - y.id;\r\n          })\r\n        );\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n\r\n  const getStates = () => {\r\n    getStateByCountryId(\"1\");\r\n  };\r\n\r\n  const getCaseManager = async () => {\r\n    await axios\r\n      .get(`${url}casemanager/list`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((resp) => setCaseManager(resp.data))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const result = JSON.parse(localStorage.getItem(\"patients\"));\r\n\r\n    setPatientAssigned(result);\r\n\r\n    getStates();\r\n    getCaseManager();\r\n  }, []);\r\n\r\n  const validateInputs = () => {\r\n    let temp = { ...errors };\r\n    temp.assignDate = assignedData.assignDate ? \"\" : \"Assign date is required.\";\r\n    temp.caseManager = assignedData.caseManager\r\n      ? \"\"\r\n      : \"Case manager is required.\";\r\n    temp.state = assignedData.state ? \"\" : \"State is required.\";\r\n    temp.lga = assignedData.lga ? \"\" : \"LGA is required.\";\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n    return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (validateInputs()) {\r\n      console.log(assignedData);\r\n\r\n      await axios\r\n        .post(`${url}assign/create`, assignedData, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((resp) => {\r\n          console.log(resp);\r\n          toast.success(\"Case manager assigned to patient successfully\");\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          toast.error(\r\n            \"Something went wrong. Please try again... \" + err.message\r\n          );\r\n        });\r\n\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container maxWidth>\r\n        <Card>\r\n          <CardBody>\r\n            <PageTitle activeMenu=\"Assign \" motherMenu=\"Case Manager\" />\r\n            {result === null ? (\r\n              <>\r\n                <Alert\r\n                  severity=\"error\"\r\n                  style={{\r\n                    width: \"100%\",\r\n                    fontSize: \"18px\",\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <b>No patient</b> selected to be assigned to a case manager...\r\n                </Alert>\r\n                <br />\r\n              </>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <p style={{ textAlign: \"right\" }}>\r\n              <Link color=\"inherit\" to={{ pathname: \"/\" }}>\r\n                <MatButton\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<ReplyIcon />}\r\n                  style={{ backgroundColor: \"rgb(153, 46, 98)\", color: \"#fff\" }}\r\n                >\r\n                  back\r\n                </MatButton>\r\n              </Link>\r\n            </p>\r\n            <hr />\r\n            <br />\r\n            <Form>\r\n              <Row>\r\n                <Col>\r\n                  {\" \"}\r\n                  <FormGroup>\r\n                    <Label for=\"assignDate\" className={classes.label}>\r\n                      Date & Time <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                      type=\"datetime-local\"\r\n                      max={new Date().toISOString().substr(0, 16)}\r\n                      name=\"assignDate\"\r\n                      id=\"assignDate\"\r\n                      placeholder=\"Date & Time Created\"\r\n                      className={classes.input}\r\n                      value={assignedData.assignDate}\r\n                      onChange={handleInputChange}\r\n                    />\r\n                    {errors.assignDate !== \"\" ? (\r\n                      <span className={classes.error}>{errors.assignDate}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col>\r\n                  <FormGroup>\r\n                    <Label for=\"caseManager\" className={classes.label}>\r\n                      Case Manager <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      style={{\r\n                        border: \"1px solid #014d88\",\r\n                        borderRadius: \"0px\",\r\n                        fontSize: \"14px\",\r\n                        color: \"#000\",\r\n                      }}\r\n                      name=\"caseManager\"\r\n                      value={assignedData.caseManager}\r\n                      id=\"caseManager\"\r\n                      onChange={handleInputChange}\r\n                    >\r\n                      <option>Select Case Manager</option>\r\n                      {caseManager &&\r\n                        caseManager.map((value, i) => (\r\n                          <option\r\n                            key={i}\r\n                            value={`${value.firstName} ${value.lastName}`}\r\n                          >\r\n                            {`${value.firstName} ${value.lastName}`}\r\n                          </option>\r\n                        ))}\r\n                    </select>\r\n                    {errors.caseManager !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.caseManager}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <FormGroup>\r\n                    <Label className={classes.label}>\r\n                      State <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"state\"\r\n                      id=\"state\"\r\n                      onChange={getProvinces}\r\n                      value={assignedData.state}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      {states.map((value) => (\r\n                        <option\r\n                          key={value.id}\r\n                          value={`${value.id} ${value.name}`}\r\n                        >\r\n                          {value.name}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                    {errors.state !== \"\" ? (\r\n                      <span className={classes.error}>{errors.state}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col>\r\n                  <FormGroup>\r\n                    <Label className={classes.label}>\r\n                      LGA <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"lga\"\r\n                      id=\"lga\"\r\n                      value={assignedData.lga}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      {provinces.map((value, index) => (\r\n                        <option key={index} value={value.name}>\r\n                          {value.name}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                    {errors.lga !== \"\" ? (\r\n                      <span className={classes.error}>{errors.lga}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n              {result !== null ? (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  startIcon={<SendIcon />}\r\n                  onClick={handleSubmit}\r\n                  style={{\r\n                    backgroundColor: \"#014d88\",\r\n                    fontWeight: \"bolder\",\r\n                    color: \"fff\",\r\n                  }}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </Form>\r\n            <br />\r\n            <br />\r\n            <Row>\r\n              <Table striped bordered size=\"sm\">\r\n                <tbody>\r\n                  <tr style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}>\r\n                    <th>Hospital No</th>\r\n                    <th>Full Name</th>\r\n                    <th>Sex</th>\r\n                    <th>Age</th>\r\n                    <th>Current Status</th>\r\n                  </tr>\r\n                  {patientAssigned &&\r\n                    patientAssigned.map((item, value) => (\r\n                      <tr key={value + 1}>\r\n                        <td>{item.hospitalNo}</td>\r\n                        <td>{item.fullName}</td>\r\n                        <td>{item.sex}</td>\r\n                        <td>{item.age}</td>\r\n                        <td>{item.currentStatus}</td>\r\n                      </tr>\r\n                    ))}\r\n                </tbody>\r\n              </Table>\r\n            </Row>\r\n          </CardBody>\r\n        </Card>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AssignCaseManager;\r\n","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\patient\\PatientList.js",["109","110","111","112","113","114","115","116","117","118","119"],"import React, { useEffect, useCallback, useState, forwardRef } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport uniq from \"lodash/uniq\";\r\nimport PersonAddIcon from \"@mui/icons-material/PersonAdd\";\r\n\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { token, url } from \"../../../api\";\r\nimport MaterialTable from \"material-table\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst PatientList = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [patientArray, setPatientArray] = useState([]);\r\n  const [assignedClient, setAssignedClient] = useState([]);\r\n\r\n  const getAssignedClient = () => {\r\n    axios\r\n      .get(`${url}assign/list`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        let arr = [];\r\n        if (response.data === null) {\r\n        } else {\r\n          response.data.forEach((x) => {\r\n            x.patients.forEach((y) => {\r\n              arr.push(y);\r\n            });\r\n          });\r\n        }\r\n        setAssignedClient(arr);\r\n      })\r\n      .catch((err) => console.error(err));\r\n  };\r\n\r\n  const patientFilter = (assignedClients, assignedClient) => {\r\n    //console.log(assignedClients, assignedClient);\r\n    if (assignedClients && assignedClient) {\r\n      return assignedClients.filter((x) => {\r\n        return !assignedClient.some((y) => {\r\n          return x.hospitalNumber === y.hospitalNo;\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAssignedClient();\r\n    localStorage.removeItem(\"patient\");\r\n    localStorage.removeItem(\"patients\");\r\n  }, []);\r\n\r\n  const handlePatientChanges = (patient) => {\r\n    let patientArray = [];\r\n\r\n    uniq(patient).map((item) => {\r\n      patientArray.push(item);\r\n    });\r\n    localStorage.setItem(\"patients\", JSON.stringify(patientArray));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Link\r\n        to={{\r\n          pathname: \"/assign\",\r\n        }}\r\n      >\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className=\"float-right mr-1\"\r\n          startIcon={<PersonAddIcon />}\r\n          style={{\r\n            float: \"right\",\r\n            backgroundColor: \"#014d88\",\r\n            fontWeight: \"bolder\",\r\n            color: \"fff\",\r\n          }}\r\n        >\r\n          <span style={{ textTransform: \"capitalize\" }}>\r\n            Assign Case Manager{\" \"}\r\n          </span>\r\n        </Button>\r\n      </Link>\r\n      <br />\r\n      <br />\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"List of Enrolled Patients\"\r\n        columns={[\r\n          { title: \"Hospital ID\", field: \"hospitalNo\" },\r\n          { title: \"Full Name\", field: \"fullName\" },\r\n          { title: \"Sex\", field: \"sex\" },\r\n          { title: \"DOB\", field: \"dob\" },\r\n          { title: \"Age\", field: \"age\" },\r\n          { title: \"Biometrics\", field: \"biometricStatus\" },\r\n          { title: \"Current Status\", field: \"currentStatus\" },\r\n          //{ title: \"Facility\", field: \"facilityId\" },\r\n          // { title: \"Date Registered\", field: \"dateOfRegistration\" },\r\n          // { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        isLoading={loading}\r\n        data={(query) =>\r\n          new Promise((resolve, reject) =>\r\n            axios\r\n              .get(\r\n                `${url}hiv/patients?pageSize=${query.pageSize}&pageNo=${query.page}&searchValue=${query.search}`,\r\n                { headers: { Authorization: `Bearer ${token}` } }\r\n              )\r\n              .then((res) => {\r\n                let result = axios\r\n                  .get(`${url}assign/list`, {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                  })\r\n                  .then((resp) => {\r\n                    let arr = [];\r\n\r\n                    resp.data.forEach((x) => {\r\n                      x.patients.forEach((y) => {\r\n                        arr.push(y);\r\n                      });\r\n                    });\r\n\r\n                    let records = patientFilter(res.data.records, arr);\r\n\r\n                    resolve({\r\n                      data: records.map((row) => ({\r\n                        hospitalNo: row.hospitalNumber,\r\n                        fullName: `${row.firstName} ${row.otherName} ${row.surname}`,\r\n                        sex: row.sex,\r\n                        dob: row.dateOfBirth,\r\n                        age: row.age,\r\n                        biometricStatus: row.biometricStatus,\r\n                        currentStatus: row.currentStatus,\r\n                      })),\r\n                      page: query.page,\r\n                      totalCount: res.data.totalRecords,\r\n                    });\r\n                  });\r\n              })\r\n          )\r\n        }\r\n        options={{\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n            fontSize: \"16px\",\r\n            padding: \"10px\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          selection: true,\r\n          filtering: false,\r\n          sorting: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          searchAutoFocus: true,\r\n          searchFieldVariant: \"filled\",\r\n          pageSizeOptions: [10, 20, 50, 100],\r\n          pageSize: 10,\r\n          showFirstLastPageButtons: false,\r\n          debounceInterval: 400,\r\n        }}\r\n        onSelectionChange={(rows) => handlePatientChanges(rows)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientList;\r\n","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\case_manager\\EditCaseManager.js",["120","121","122"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormFeedback,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport UpdateIcon from \"@mui/icons-material/Update\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { Alert } from \"reactstrap\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../api\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n}));\r\n\r\nconst EditCaseManager = (props) => {\r\n  const classes = useStyles();\r\n\r\n  //console.log(props.casemanager);\r\n\r\n  const [data, setData] = useState({\r\n    designation: props.casemanager?.designation,\r\n    firstName: props.casemanager?.firstName,\r\n    lastName: props.casemanager?.lastName,\r\n    sex: props.casemanager?.sex,\r\n    phoneNumber: props.casemanager?.phoneNumber,\r\n  });\r\n\r\n  const [contactPhone, setContactPhone] = useState(data.phoneNumber);\r\n\r\n  useEffect(() => {\r\n    setData(props.casemanager);\r\n  }, [props.casemanager]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setData({\r\n      ...data,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const checkPhoneNumber = (e) => {\r\n    setContactPhone(e);\r\n  };\r\n\r\n  const editCaseManager = async (e) => {\r\n    e.preventDefault();\r\n\r\n    console.log(\"Edit data\", contactPhone);\r\n    data.phoneNumber = contactPhone ?? data.phoneNumber;\r\n    await axios\r\n      .put(`${baseUrl}casemanager/update/${props.casemanager.id}`, data, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((resp) => {\r\n        console.log(resp);\r\n        toast.success(\"Case manager updated successfully\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        toast.error(\"Something went wrong. Please try again... \" + err.message);\r\n      });\r\n    props.getAllCaseManagers();\r\n    props.togglestatus();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        isOpen={props.modalstatus}\r\n        toggle={props.togglestatus}\r\n        className={props.className}\r\n        size=\"lg\"\r\n      >\r\n        <Form>\r\n          <ModalHeader toggle={props.togglestatus}>\r\n            Edit Case Manager\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <Card>\r\n              <CardBody>\r\n                <Row>\r\n                  <Col md={6}>\r\n                    <FormGroup>\r\n                      <Label for=\"courierRiderName\" className={classes.label}>\r\n                        Designation <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"designation\"\r\n                        id=\"designation\"\r\n                        value={data.designation}\r\n                        onChange={handleInputChange}\r\n                        className=\"form-control\"\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <FormGroup>\r\n                      <Label for=\"courierRiderName\" className={classes.label}>\r\n                        First Name <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"firstName\"\r\n                        id=\"firstName\"\r\n                        value={data.firstName}\r\n                        onChange={handleInputChange}\r\n                        className=\"form-control\"\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col md={6}>\r\n                    <FormGroup>\r\n                      <Label for=\"courierRiderName\" className={classes.label}>\r\n                        Last Name <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"lastName\"\r\n                        id=\"lastName\"\r\n                        value={data.lastName}\r\n                        onChange={handleInputChange}\r\n                        className=\"form-control\"\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <FormGroup>\r\n                      <Label for=\"sex\" className={classes.label}>\r\n                        Gender <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        style={{\r\n                          border: \"1px solid #014d88\",\r\n                          borderRadius: \"0px\",\r\n                          fontSize: \"14px\",\r\n                          color: \"#000\",\r\n                        }}\r\n                        name=\"sex\"\r\n                        value={data.sex}\r\n                        id=\"sex\"\r\n                        onChange={handleInputChange}\r\n                      >\r\n                        <option>Select Gender</option>\r\n                        <option>Male</option>\r\n                        <option>Female</option>\r\n                      </select>\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col md={6}>\r\n                    <FormGroup>\r\n                      <Label for=\"phoneNumber\" className={classes.label}>\r\n                        Phone Number <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <PhoneInput\r\n                        containerStyle={{\r\n                          width: \"100%\",\r\n                          border: \"1px solid #014d88\",\r\n                        }}\r\n                        inputStyle={{\r\n                          width: \"100%\",\r\n                          borderRadius: \"0px\",\r\n                          height: 44,\r\n                        }}\r\n                        country={\"ng\"}\r\n                        masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\r\n                        placeholder=\"(234)7099999999\"\r\n                        value={data.phoneNumber}\r\n                        onChange={(e) => checkPhoneNumber(e)}\r\n                      />\r\n                      {/* <Input\r\n                        type=\"text\"\r\n                        name=\"phoneNumber\"\r\n                        id=\"phoneNumber\"\r\n                        value={data.phoneNumber}\r\n                        onChange={handleInputChange}\r\n                        className=\"form-control\"\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      /> */}\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n                <br />\r\n                <br />\r\n\r\n                <MatButton\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  startIcon={<UpdateIcon />}\r\n                  onClick={editCaseManager}\r\n                >\r\n                  Submit\r\n                </MatButton>\r\n\r\n                <MatButton\r\n                  variant=\"contained\"\r\n                  color=\"default\"\r\n                  onClick={props.togglestatus}\r\n                  className={classes.button}\r\n                  startIcon={<CancelIcon />}\r\n                >\r\n                  Cancel\r\n                </MatButton>\r\n              </CardBody>\r\n            </Card>\r\n          </ModalBody>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditCaseManager;\r\n","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\patient\\PatientTabs.js",[],["123","124"],"C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\patient\\AssignedClients.js",["125","126","127","128","129","130","131","132"],"import React, { useEffect, useCallback, useState } from \"react\";\r\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { FaEye, FaUserPlus } from \"react-icons/fa\";\r\n\r\nimport { forwardRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { token, url } from \"../../../api\";\r\nimport MaterialTable from \"material-table\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst AssignedClients = (props) => {\r\n  const [loading, setLoading] = useState(\"\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [patientArray, setPatientArray] = useState([]);\r\n  const [totalPage, setTotalPage] = useState([]);\r\n\r\n  const getCaseManagers = async () => {\r\n    await axios\r\n      .get(`${url}assign/list`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => setTotalPage(response.data));\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCaseManagers();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"Case managers assigned to patients\"\r\n        columns={[\r\n          { title: \"Assigned Date\", field: \"assignDate\" },\r\n          { title: \"Case Manager\", field: \"caseManager\" },\r\n          { title: \"State\", field: \"state\" },\r\n          { title: \"LGA\", field: \"lga\" },\r\n          { title: \"Patients\", field: \"patients\" },\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        isLoading={loading}\r\n        data={\r\n          totalPage &&\r\n          totalPage.map((d) => ({\r\n            assignDate: d.assignDate?.replace(\"T\", \" \"),\r\n            caseManager: d.caseManager,\r\n            state: d.state?.split(\" \")[1],\r\n            lga: d.lga,\r\n            patients: d.patients.length,\r\n            actions: (\r\n              <>\r\n                <Link\r\n                  to={{\r\n                    pathname: \"/clients\",\r\n                    state: { clients: d },\r\n                  }}\r\n                >\r\n                  <ButtonGroup\r\n                    variant=\"contained\"\r\n                    aria-label=\"split button\"\r\n                    style={{\r\n                      backgroundColor: \"rgb(153, 46, 98)\",\r\n                      height: \"30px\",\r\n                      width: \"215px\",\r\n                    }}\r\n                    size=\"large\"\r\n                  >\r\n                    <Button\r\n                      color=\"primary\"\r\n                      size=\"small\"\r\n                      aria-label=\"select merge strategy\"\r\n                      aria-haspopup=\"menu\"\r\n                      style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n                    >\r\n                      <MdDashboard size=\"20\" color=\"#fff\" />\r\n                    </Button>\r\n                    <Button style={{ backgroundColor: \"rgb(153, 46, 98)\" }}>\r\n                      <span\r\n                        style={{\r\n                          fontSize: \"12px\",\r\n                          color: \"#fff\",\r\n                          fontWeight: \"bolder\",\r\n                        }}\r\n                      >\r\n                        View Patients\r\n                      </span>\r\n                    </Button>\r\n                  </ButtonGroup>\r\n                </Link>\r\n              </>\r\n            ),\r\n          }))\r\n        }\r\n        options={{\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n            fontSize: \"16px\",\r\n            padding: \"10px\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          filtering: false,\r\n          sorting: true,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 50, 100],\r\n          pageSize: 10,\r\n          showFirstLastPageButtons: false,\r\n          debounceInterval: 400,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AssignedClients;\r\n","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\patient\\ViewAssignedClients.js",["133","134","135","136","137","138","139","140","141"],"import React, { useEffect, useCallback, forwardRef, useState } from \"react\";\r\nimport { useLocation, useHistory } from \"react-router-dom\";\r\nimport uniq from \"lodash/uniq\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@mui/material/Container\";\r\nimport PersonAddIcon from \"@mui/icons-material/PersonAdd\";\r\nimport PersonRemoveIcon from \"@mui/icons-material/PersonRemove\";\r\nimport Button from \"@mui/material/Button\";\r\nimport ReassignClientModal from \"./ReassignClientModal\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { token, url } from \"../../../api\";\r\nimport PageTitle from \"../layouts/PageTitle\";\r\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport ReplyIcon from \"@mui/icons-material/Reply\";\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Table,\r\n  Badge,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n} from \"reactstrap\";\r\n\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    border: \"1px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"14px\",\r\n    color: \"#000\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n  inputGroupText: {\r\n    backgroundColor: \"#014d88\",\r\n    fontWeight: \"bolder\",\r\n    color: \"#fff\",\r\n    borderRadius: \"0px\",\r\n  },\r\n  label: {\r\n    fontSize: \"14px\",\r\n    color: \"#014d88\",\r\n    fontWeight: \"600\",\r\n  },\r\n}));\r\n\r\nconst ViewAssignedClients = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const location = useLocation();\r\n  const { clients } = location.state;\r\n  const history = useHistory();\r\n  const [addModal, setAddModal] = useState(false);\r\n  const [patient, setPatient] = useState({});\r\n  const classes = useStyles();\r\n  const [assignedData, setAssignedData] = useState(clients);\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setAddModal(!addModal);\r\n\r\n  const addCaseManager = () => {\r\n    setAddModal(!addModal);\r\n  };\r\n\r\n  const toggleDelete = (id) => {\r\n    localStorage.setItem(\"patientID\", JSON.stringify(id));\r\n    setModal(!modal);\r\n  };\r\n\r\n  const onCancelDelete = () => {\r\n    setModal(false);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    const patientId = localStorage.getItem(\"patientID\");\r\n    axios\r\n      .delete(`${url}assign/delete/${patientId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        localStorage.removeItem(\"patientID\");\r\n        Swal.fire({\r\n          icon: \"success\",\r\n          text: \"Patient Unassigned Successfully\",\r\n          timer: 1500,\r\n        });\r\n\r\n        setModal(false);\r\n        // getAllCaseManagers();\r\n        history.push(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          title: \"Oops...\",\r\n          text: \"An error occurred while deleting!!!\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const handlePatientChanges = (patient) => {\r\n    console.log(patient);\r\n    let patientArray = [];\r\n\r\n    patient.forEach((patientChange) => {\r\n      const {\r\n        id,\r\n        hospitalNo,\r\n        fullName,\r\n        sex,\r\n        dob,\r\n        age,\r\n        biometricStatus,\r\n        currentStatus,\r\n      } = patientChange;\r\n      patientArray.push({\r\n        id,\r\n        hospitalNo,\r\n        fullName,\r\n        sex,\r\n        dob,\r\n        age,\r\n        biometricStatus,\r\n        currentStatus,\r\n      });\r\n    });\r\n\r\n    console.log(patientArray);\r\n    localStorage.setItem(\"patient\", JSON.stringify(patientArray));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container maxWidth>\r\n        <Card>\r\n          <CardBody>\r\n            <PageTitle activeMenu=\"Clients \" motherMenu=\"Case Manager\" />\r\n            <p style={{ textAlign: \"right\" }}>\r\n              <Link color=\"inherit\" to={{ pathname: \"/\" }}>\r\n                <MatButton\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<ReplyIcon />}\r\n                  style={{ backgroundColor: \"rgb(153, 46, 98)\", color: \"#fff\" }}\r\n                >\r\n                  back\r\n                </MatButton>\r\n              </Link>\r\n            </p>\r\n            <hr />\r\n            <br />\r\n            <Form>\r\n              <Row>\r\n                <Col>\r\n                  {\" \"}\r\n                  <FormGroup>\r\n                    <Label for=\"assignDate\" className={classes.label}>\r\n                      Assigned Date\r\n                    </Label>\r\n                    <Input\r\n                      type=\"datetime-local\"\r\n                      max={new Date().toISOString().substr(0, 16)}\r\n                      name=\"assignDate\"\r\n                      id=\"assignDate\"\r\n                      placeholder=\"Date & Time Created\"\r\n                      className={classes.input}\r\n                      value={assignedData.assignDate}\r\n                      disabled\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col>\r\n                  <FormGroup>\r\n                    <Label for=\"caseManager\" className={classes.label}>\r\n                      Case Manager\r\n                    </Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"caseManager\"\r\n                      value={assignedData.caseManager}\r\n                      id=\"caseManager\"\r\n                      className={classes.input}\r\n                      disabled\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <FormGroup>\r\n                    <Label className={classes.label}>State</Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"state\"\r\n                      id=\"state\"\r\n                      className={classes.input}\r\n                      value={assignedData.state.split(\" \")[1]}\r\n                      disabled\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col>\r\n                  <FormGroup>\r\n                    <Label className={classes.label}>LGA</Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"lga\"\r\n                      id=\"lga\"\r\n                      value={assignedData.lga}\r\n                      className={classes.input}\r\n                      disabled\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n            <Row>\r\n              <Col></Col>\r\n              <Col></Col>\r\n              <Col>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className=\"float-right mr-1\"\r\n                  startIcon={<PersonAddIcon />}\r\n                  onClick={addCaseManager}\r\n                  style={{\r\n                    float: \"right\",\r\n                    backgroundColor: \"#014d88\",\r\n                    fontWeight: \"bolder\",\r\n                    color: \"fff\",\r\n                  }}\r\n                >\r\n                  <span style={{ textTransform: \"capitalize\" }}>Reassign </span>\r\n                </Button>\r\n              </Col>\r\n              <br />\r\n              <br />\r\n              <MaterialTable\r\n                icons={tableIcons}\r\n                title=\"Enrolled Patients Assigned\"\r\n                columns={[\r\n                  { title: \"ID\", field: \"id\" },\r\n                  { title: \"Hospital No\", field: \"hospitalNo\" },\r\n                  { title: \"Full Name\", field: \"fullName\" },\r\n                  { title: \"Sex\", field: \"sex\" },\r\n                  { title: \"DOB\", field: \"dob\" },\r\n                  { title: \"Age\", field: \"age\" },\r\n                  { title: \"Biometrics\", field: \"biometricStatus\" },\r\n                  { title: \"Enrolled Status\", field: \"currentStatus\" },\r\n                  { title: \"\", field: \"assigned\" },\r\n                  { title: \"Action\", field: \"actions\" },\r\n                ]}\r\n                isLoading={loading}\r\n                data={\r\n                  assignedData &&\r\n                  assignedData.patients.map((item) => ({\r\n                    id: item.id,\r\n                    hospitalNo: item.hospitalNo,\r\n                    fullName: item.fullName,\r\n                    sex: item.sex,\r\n                    dob: item.dob,\r\n                    age: item.age,\r\n                    biometricStatus: item.biometricStatus,\r\n                    currentStatus: item.currentStatus,\r\n                    assigned: <Badge color=\"info\">Assigned</Badge>,\r\n                    actions: (\r\n                      <>\r\n                        <ButtonGroup\r\n                          variant=\"contained\"\r\n                          aria-label=\"split button\"\r\n                          style={{\r\n                            backgroundColor: \"rgb(153, 46, 98)\",\r\n                            height: \"30px\",\r\n                          }}\r\n                          size=\"large\"\r\n                        >\r\n                          {/* <Button\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            aria-label=\"select merge strategy\"\r\n                            onClick={() => addCaseManager(item)}\r\n                            style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n                          >\r\n                            <PersonAddIcon />\r\n                          </Button> */}\r\n                          <Button\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            aria-label=\"select merge strategy\"\r\n                            onClick={() => {\r\n                              toggleDelete(item.id);\r\n                            }}\r\n                            style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n                          >\r\n                            <PersonRemoveIcon />\r\n                            <span style={{ textTransform: \"capitalize\" }}>\r\n                              {\" \"}\r\n                              Unassign\r\n                            </span>\r\n                          </Button>\r\n                        </ButtonGroup>\r\n                      </>\r\n                    ),\r\n                  }))\r\n                }\r\n                options={{\r\n                  headerStyle: {\r\n                    backgroundColor: \"#014d88\",\r\n                    color: \"#fff\",\r\n                    fontSize: \"16px\",\r\n                    padding: \"10px\",\r\n                  },\r\n                  searchFieldStyle: {\r\n                    width: \"200%\",\r\n                    margingLeft: \"250px\",\r\n                  },\r\n                  selection: true,\r\n                  filtering: false,\r\n                  sorting: false,\r\n                  exportButton: false,\r\n                  searchFieldAlignment: \"left\",\r\n                  searchAutoFocus: true,\r\n                  searchFieldVariant: \"filled\",\r\n                  pageSizeOptions: [10, 20, 50, 100],\r\n                  pageSize: 10,\r\n                  showFirstLastPageButtons: false,\r\n                  debounceInterval: 400,\r\n                }}\r\n                onSelectionChange={(rows) => handlePatientChanges(rows)}\r\n              />\r\n            </Row>\r\n          </CardBody>\r\n        </Card>\r\n      </Container>\r\n\r\n      <ReassignClientModal\r\n        modalstatus={addModal}\r\n        togglestatus={toggle}\r\n        // getAllCaseManagers={getAllCaseManagers}\r\n      />\r\n      <Modal isOpen={modal} toggle={onCancelDelete}>\r\n        <ModalHeader toggle={onCancelDelete}>Remove Patient</ModalHeader>\r\n        <ModalBody>Are you sure you want unassign this patient?</ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" type=\"button\" onClick={handleDelete}>\r\n            Yes\r\n          </Button>{\" \"}\r\n          <Button\r\n            color=\"secondary\"\r\n            type=\"button\"\r\n            onClick={(e) => onCancelDelete()}\r\n          >\r\n            No\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ViewAssignedClients;\r\n","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\layouts\\SplitActionButton.js",["142"],"import * as React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\r\nimport ClickAwayListener from \"@mui/material/ClickAwayListener\";\r\nimport Grow from \"@mui/material/Grow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Popper from \"@mui/material/Popper\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport MenuList from \"@mui/material/MenuList\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { FaCaretDown } from \"react-icons/fa\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport { useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst options = [\"Delete\", \"Edit\"];\r\n\r\nexport default function SplitActionButton(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const anchorRef = useRef(null);\r\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n  const handleClick = () => {\r\n    console.info(`You clicked ${options[selectedIndex]}`);\r\n  };\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ButtonGroup\r\n        variant=\"contained\"\r\n        ref={anchorRef}\r\n        style={{\r\n          backgroundColor: \"rgb(153, 46, 98)\",\r\n          height: \"30px\",\r\n          width: \"150px\",\r\n        }}\r\n      >\r\n        <Link\r\n          to={props.actions[0].to}\r\n          style={{ borderRight: \"20px solid #fff !important\" }}\r\n        >\r\n          <Button\r\n            size=\"small\"\r\n            onClick={handleClick}\r\n            variant=\"contained\"\r\n            startIcon={props.actions[0].icon}\r\n            style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n          >\r\n            <Typography variant=\"h7\" style={{ fontWeight: \"bolder\" }}>\r\n              {props.actions[0].name}\r\n            </Typography>\r\n          </Button>\r\n        </Link>\r\n\r\n        <Divider\r\n          orientation=\"vertical\"\r\n          flexItem\r\n          style={{\r\n            borderRight: \"20px solid #fff !important\",\r\n            backgroundColor: \"#fff\",\r\n            width: \"1px\",\r\n            height: \"26px\",\r\n            marginTop: \"2px\",\r\n          }}\r\n        >\r\n          1\r\n        </Divider>\r\n        <Button\r\n          size=\"medium\"\r\n          aria-controls={open ? \"split-button-menu\" : undefined}\r\n          aria-expanded={open ? \"true\" : undefined}\r\n          aria-label=\"select merge strategy\"\r\n          aria-haspopup=\"menu\"\r\n          onClick={handleToggle}\r\n          style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n        >\r\n          <FaCaretDown size=\"24\" />\r\n        </Button>\r\n      </ButtonGroup>\r\n      <Popper\r\n        open={open}\r\n        anchorEl={anchorRef.current}\r\n        role={undefined}\r\n        transition\r\n        disablePortal\r\n        style={{ zIndex: \"10000\" }}\r\n      >\r\n        {({ TransitionProps, placement }) => (\r\n          <Grow\r\n            {...TransitionProps}\r\n            style={{\r\n              transformOrigin:\r\n                placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n              zIndex: \"1000\",\r\n            }}\r\n          >\r\n            {/*width: 130,*/}\r\n            <Paper\r\n              sx={{\r\n                minWidth: \"130px\",\r\n                maxWidth: \"150px\",\r\n                marginTop: \"2px\",\r\n                zIndex: \"1000\",\r\n              }}\r\n            >\r\n              <ClickAwayListener onClickAway={handleClose}>\r\n                <MenuList id=\"split-button-menu\" autoFocusItem>\r\n                  {props.actions.slice(1).map((option, index) =>\r\n                    option.name === \" Delete\" ? (\r\n                      <MenuItem key={Math.random()}>\r\n                        <Link to={option.to} onClick={option.deleteAction}>\r\n                          {option.icon}\r\n                          <span\r\n                            style={{\r\n                              color: \"rgb(153, 46, 98)\",\r\n                              fontWeight: \"bolder\",\r\n                              fontSize: \"12px\",\r\n                            }}\r\n                          >\r\n                            {option.name}\r\n                          </span>\r\n                        </Link>\r\n                      </MenuItem>\r\n                    ) : (\r\n                      <MenuItem key={Math.random()}>\r\n                        <Link to={option.to} onClick={option.editAction}>\r\n                          {option.icon}\r\n                          <span\r\n                            style={{\r\n                              color: \"rgb(153, 46, 98)\",\r\n                              fontWeight: \"bolder\",\r\n                              fontSize: \"12px\",\r\n                            }}\r\n                          >\r\n                            {option.name}\r\n                          </span>\r\n                        </Link>\r\n                      </MenuItem>\r\n                    )\r\n                  )}\r\n                </MenuList>\r\n              </ClickAwayListener>\r\n            </Paper>\r\n          </Grow>\r\n        )}\r\n      </Popper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\layouts\\PageTitle.js",[],"C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\layouts\\PageTitle.js",[],"C:\\Users\\victor.ajor\\projects\\casemanager\\src\\main\\webapp\\jsx\\components\\patient\\ReassignClientModal.js",["143","144","145","146","147"],"import React, { useState, useEffect } from \"react\";\r\nimport { useLocation, useHistory } from \"react-router-dom\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormFeedback,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { Alert } from \"reactstrap\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport { token, url } from \"../../../api\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n}));\r\n\r\nconst ReassignClientModal = (props) => {\r\n  const patient = JSON.parse(localStorage.getItem(\"patient\"));\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [states, setStates] = useState([]);\r\n  const [provinces, setProvinces] = useState([]);\r\n  const [caseManager, setCaseManager] = useState([]);\r\n  const [assignedData, setAssignedData] = useState({\r\n    assignDate: \"\",\r\n    caseManager: \"\",\r\n    state: \"\",\r\n    lga: \"\",\r\n    patients: [],\r\n  });\r\n\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setAssignedData({\r\n      ...assignedData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  function getStateByCountryId(getCountryId) {\r\n    axios\r\n      .get(\r\n        `${url}organisation-units/parent-organisation-units/${getCountryId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setStates(response.data);\r\n      })\r\n      .catch((error) => {});\r\n  }\r\n\r\n  const getProvinces = (e) => {\r\n    let stateValue = e.target.value.split(\" \");\r\n    let stateId = stateValue[0];\r\n    let stateName = stateValue[1];\r\n\r\n    if (stateName.length > 0) {\r\n      setAssignedData({ ...assignedData, state: e.target.value });\r\n    }\r\n\r\n    axios\r\n      .get(`${url}organisation-units/parent-organisation-units/${stateId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setProvinces(\r\n          response.data.sort((x, y) => {\r\n            return x.id - y.id;\r\n          })\r\n        );\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n\r\n  const getStates = () => {\r\n    getStateByCountryId(\"1\");\r\n  };\r\n\r\n  const getCaseManager = async () => {\r\n    await axios\r\n      .get(`${url}casemanager/list`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((resp) => setCaseManager(resp.data))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  useEffect(() => {\r\n    getStates();\r\n    getCaseManager();\r\n  }, []);\r\n\r\n  const validateInputs = () => {\r\n    let temp = { ...errors };\r\n    temp.assignDate = assignedData.assignDate ? \"\" : \"Assign date is required.\";\r\n    temp.caseManager = assignedData.caseManager\r\n      ? \"\"\r\n      : \"Case manager is required.\";\r\n    temp.state = assignedData.state ? \"\" : \"State is required.\";\r\n    temp.lga = assignedData.lga ? \"\" : \"LGA is required.\";\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n    return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n\r\n  const assignCaseManager = async (e) => {\r\n    e.preventDefault();\r\n    assignedData.patients = patient;\r\n\r\n    if (validateInputs()) {\r\n      console.log(assignedData);\r\n      await axios\r\n        .post(`${url}assign/reassign`, assignedData, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((resp) => {\r\n          console.log(resp);\r\n          toast.success(\"Patient reassigned successfully\");\r\n          history.push(\"/\");\r\n        })\r\n        .catch((err) => {\r\n          //console.log(err);\r\n          toast.error(\r\n            \"Something went wrong. Please try again... \" + err.message\r\n          );\r\n        });\r\n      //props.getAllCaseManagers();\r\n      props.togglestatus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        isOpen={props.modalstatus}\r\n        toggle={props.togglestatus}\r\n        className={props.className}\r\n        size=\"lg\"\r\n      >\r\n        <Form>\r\n          <ModalHeader toggle={props.togglestatus}>\r\n            Reassign Patient to Case Manager\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <Card>\r\n              <CardBody>\r\n                <Form>\r\n                  <Row>\r\n                    <Col>\r\n                      {\" \"}\r\n                      <FormGroup>\r\n                        <Label for=\"assignDate\" className={classes.label}>\r\n                          Date & Time <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <Input\r\n                          type=\"datetime-local\"\r\n                          max={new Date().toISOString().substr(0, 16)}\r\n                          name=\"assignDate\"\r\n                          id=\"assignDate\"\r\n                          placeholder=\"Date & Time Created\"\r\n                          className=\"form-control\"\r\n                          style={{\r\n                            border: \"1px solid #014d88\",\r\n                            borderRadius: \"0px\",\r\n                            fontSize: \"14px\",\r\n                            color: \"#000\",\r\n                          }}\r\n                          value={assignedData.assignDate}\r\n                          onChange={handleInputChange}\r\n                        />\r\n                        {errors.assignDate !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.assignDate}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label for=\"caseManager\" className={classes.label}>\r\n                          Case Manager <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          style={{\r\n                            border: \"1px solid #014d88\",\r\n                            borderRadius: \"0px\",\r\n                            fontSize: \"14px\",\r\n                            color: \"#000\",\r\n                          }}\r\n                          name=\"caseManager\"\r\n                          value={assignedData.caseManager}\r\n                          id=\"caseManager\"\r\n                          onChange={handleInputChange}\r\n                        >\r\n                          <option>Select Case Manager</option>\r\n                          {caseManager &&\r\n                            caseManager.map((value, i) => (\r\n                              <option\r\n                                key={i}\r\n                                value={`${value.firstName} ${value.lastName}`}\r\n                              >\r\n                                {`${value.firstName} ${value.lastName}`}\r\n                              </option>\r\n                            ))}\r\n                        </select>\r\n                        {errors.caseManager !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.caseManager}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label className={classes.label}>\r\n                          State <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"state\"\r\n                          id=\"state\"\r\n                          onChange={getProvinces}\r\n                          value={assignedData.state}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          {states.map((value) => (\r\n                            <option\r\n                              key={value.id}\r\n                              value={`${value.id} ${value.name}`}\r\n                            >\r\n                              {value.name}\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                        {errors.state !== \"\" ? (\r\n                          <span className={classes.error}>{errors.state}</span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label className={classes.label}>\r\n                          LGA <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"lga\"\r\n                          id=\"lga\"\r\n                          value={assignedData.lga}\r\n                          onChange={handleInputChange}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          {provinces.map((value, index) => (\r\n                            <option key={index} value={value.name}>\r\n                              {value.name}\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                        {errors.lga !== \"\" ? (\r\n                          <span className={classes.error}>{errors.lga}</span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                </Form>\r\n                <br />\r\n                <br />\r\n\r\n                <MatButton\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  startIcon={<SaveIcon />}\r\n                  onClick={assignCaseManager}\r\n                >\r\n                  Confirm\r\n                </MatButton>\r\n\r\n                <MatButton\r\n                  variant=\"contained\"\r\n                  color=\"default\"\r\n                  onClick={props.togglestatus}\r\n                  className={classes.button}\r\n                  startIcon={<CancelIcon />}\r\n                >\r\n                  Cancel\r\n                </MatButton>\r\n              </CardBody>\r\n            </Card>\r\n          </ModalBody>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReassignClientModal;\r\n",{"ruleId":"148","severity":1,"message":"149","line":4,"column":41,"nodeType":"150","messageId":"151","endLine":4,"endColumn":47},{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"148","severity":1,"message":"156","line":20,"column":10,"nodeType":"150","messageId":"151","endLine":20,"endColumn":21},{"ruleId":"148","severity":1,"message":"157","line":1,"column":28,"nodeType":"150","messageId":"151","endLine":1,"endColumn":39},{"ruleId":"148","severity":1,"message":"158","line":2,"column":10,"nodeType":"150","messageId":"151","endLine":2,"endColumn":21},{"ruleId":"148","severity":1,"message":"159","line":16,"column":10,"nodeType":"150","messageId":"151","endLine":16,"endColumn":15},{"ruleId":"148","severity":1,"message":"160","line":22,"column":10,"nodeType":"150","messageId":"151","endLine":22,"endColumn":15},{"ruleId":"148","severity":1,"message":"161","line":112,"column":9,"nodeType":"150","messageId":"151","endLine":112,"endColumn":16},{"ruleId":"148","severity":1,"message":"162","line":113,"column":19,"nodeType":"150","messageId":"151","endLine":113,"endColumn":29},{"ruleId":"148","severity":1,"message":"163","line":132,"column":9,"nodeType":"150","messageId":"151","endLine":132,"endColumn":23},{"ruleId":"148","severity":1,"message":"164","line":1,"column":27,"nodeType":"150","messageId":"151","endLine":1,"endColumn":36},{"ruleId":"148","severity":1,"message":"165","line":7,"column":3,"nodeType":"150","messageId":"151","endLine":7,"endColumn":15},{"ruleId":"148","severity":1,"message":"166","line":20,"column":10,"nodeType":"150","messageId":"151","endLine":20,"endColumn":15},{"ruleId":"148","severity":1,"message":"167","line":21,"column":10,"nodeType":"150","messageId":"151","endLine":21,"endColumn":17},{"ruleId":"148","severity":1,"message":"157","line":1,"column":28,"nodeType":"150","messageId":"151","endLine":1,"endColumn":39},{"ruleId":"148","severity":1,"message":"168","line":87,"column":9,"nodeType":"150","messageId":"151","endLine":87,"endColumn":17},{"ruleId":"169","severity":1,"message":"170","line":169,"column":6,"nodeType":"171","endLine":169,"endColumn":8,"suggestions":"172"},{"ruleId":"148","severity":1,"message":"157","line":1,"column":28,"nodeType":"150","messageId":"151","endLine":1,"endColumn":39},{"ruleId":"148","severity":1,"message":"173","line":2,"column":10,"nodeType":"150","messageId":"151","endLine":2,"endColumn":14},{"ruleId":"148","severity":1,"message":"160","line":11,"column":10,"nodeType":"150","messageId":"151","endLine":11,"endColumn":15},{"ruleId":"148","severity":1,"message":"162","line":55,"column":19,"nodeType":"150","messageId":"151","endLine":55,"endColumn":29},{"ruleId":"148","severity":1,"message":"174","line":56,"column":10,"nodeType":"150","messageId":"151","endLine":56,"endColumn":21},{"ruleId":"148","severity":1,"message":"175","line":56,"column":23,"nodeType":"150","messageId":"151","endLine":56,"endColumn":37},{"ruleId":"148","severity":1,"message":"176","line":57,"column":10,"nodeType":"150","messageId":"151","endLine":57,"endColumn":22},{"ruleId":"148","severity":1,"message":"177","line":57,"column":24,"nodeType":"150","messageId":"151","endLine":57,"endColumn":39},{"ruleId":"148","severity":1,"message":"178","line":58,"column":10,"nodeType":"150","messageId":"151","endLine":58,"endColumn":24},{"ruleId":"179","severity":1,"message":"180","line":100,"column":30,"nodeType":"181","messageId":"182","endLine":100,"endColumn":32},{"ruleId":"148","severity":1,"message":"183","line":156,"column":21,"nodeType":"150","messageId":"151","endLine":156,"endColumn":27},{"ruleId":"148","severity":1,"message":"165","line":7,"column":3,"nodeType":"150","messageId":"151","endLine":7,"endColumn":15},{"ruleId":"148","severity":1,"message":"166","line":22,"column":10,"nodeType":"150","messageId":"151","endLine":22,"endColumn":15},{"ruleId":"148","severity":1,"message":"167","line":23,"column":10,"nodeType":"150","messageId":"151","endLine":23,"endColumn":17},{"ruleId":"152","replacedBy":"184"},{"ruleId":"154","replacedBy":"185"},{"ruleId":"148","severity":1,"message":"157","line":1,"column":28,"nodeType":"150","messageId":"151","endLine":1,"endColumn":39},{"ruleId":"148","severity":1,"message":"186","line":7,"column":10,"nodeType":"150","messageId":"151","endLine":7,"endColumn":15},{"ruleId":"148","severity":1,"message":"187","line":7,"column":17,"nodeType":"150","messageId":"151","endLine":7,"endColumn":27},{"ruleId":"148","severity":1,"message":"162","line":54,"column":19,"nodeType":"150","messageId":"151","endLine":54,"endColumn":29},{"ruleId":"148","severity":1,"message":"174","line":55,"column":10,"nodeType":"150","messageId":"151","endLine":55,"endColumn":21},{"ruleId":"148","severity":1,"message":"175","line":55,"column":23,"nodeType":"150","messageId":"151","endLine":55,"endColumn":37},{"ruleId":"148","severity":1,"message":"176","line":56,"column":10,"nodeType":"150","messageId":"151","endLine":56,"endColumn":22},{"ruleId":"148","severity":1,"message":"177","line":56,"column":24,"nodeType":"150","messageId":"151","endLine":56,"endColumn":39},{"ruleId":"148","severity":1,"message":"164","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"157","line":1,"column":28,"nodeType":"150","messageId":"151","endLine":1,"endColumn":39},{"ruleId":"148","severity":1,"message":"188","line":3,"column":8,"nodeType":"150","messageId":"151","endLine":3,"endColumn":12},{"ruleId":"148","severity":1,"message":"160","line":12,"column":10,"nodeType":"150","messageId":"151","endLine":12,"endColumn":15},{"ruleId":"148","severity":1,"message":"189","line":31,"column":3,"nodeType":"150","messageId":"151","endLine":31,"endColumn":8},{"ruleId":"148","severity":1,"message":"162","line":137,"column":19,"nodeType":"150","messageId":"151","endLine":137,"endColumn":29},{"ruleId":"148","severity":1,"message":"190","line":142,"column":10,"nodeType":"150","messageId":"151","endLine":142,"endColumn":17},{"ruleId":"148","severity":1,"message":"191","line":142,"column":19,"nodeType":"150","messageId":"151","endLine":142,"endColumn":29},{"ruleId":"148","severity":1,"message":"192","line":144,"column":24,"nodeType":"150","messageId":"151","endLine":144,"endColumn":39},{"ruleId":"148","severity":1,"message":"193","line":21,"column":25,"nodeType":"150","messageId":"151","endLine":21,"endColumn":41},{"ruleId":"148","severity":1,"message":"158","line":2,"column":10,"nodeType":"150","messageId":"151","endLine":2,"endColumn":21},{"ruleId":"148","severity":1,"message":"165","line":8,"column":3,"nodeType":"150","messageId":"151","endLine":8,"endColumn":15},{"ruleId":"148","severity":1,"message":"166","line":21,"column":10,"nodeType":"150","messageId":"151","endLine":21,"endColumn":15},{"ruleId":"148","severity":1,"message":"167","line":22,"column":10,"nodeType":"150","messageId":"151","endLine":22,"endColumn":17},{"ruleId":"169","severity":1,"message":"170","line":142,"column":6,"nodeType":"171","endLine":142,"endColumn":8,"suggestions":"194"},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-native-reassign",["195"],"no-negated-in-lhs",["196"],"'permissions' is assigned a value but never used.","'useCallback' is defined but never used.","'useLocation' is defined but never used.","'Badge' is defined but never used.","'toast' is defined but never used.","'classes' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'userPermission' is assigned a value but never used.","'useEffect' is defined but never used.","'FormFeedback' is defined but never used.","'Alert' is defined but never used.","'Spinner' is defined but never used.","'location' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getStates'. Either include it or remove the dependency array.","ArrayExpression",["197"],"'Card' is defined but never used.","'currentPage' is assigned a value but never used.","'setCurrentPage' is assigned a value but never used.","'patientArray' is assigned a value but never used.","'setPatientArray' is assigned a value but never used.","'assignedClient' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'result' is assigned a value but never used.",["195"],["196"],"'FaEye' is defined but never used.","'FaUserPlus' is defined but never used.","'uniq' is defined but never used.","'Table' is defined but never used.","'patient' is assigned a value but never used.","'setPatient' is assigned a value but never used.","'setAssignedData' is assigned a value but never used.","'setSelectedIndex' is assigned a value but never used.",["198"],"no-global-assign","no-unsafe-negation",{"desc":"199","fix":"200"},{"desc":"199","fix":"201"},"Update the dependencies array to be: [getStates]",{"range":"202","text":"203"},{"range":"204","text":"203"},[4135,4137],"[getStates]",[3376,3378]]